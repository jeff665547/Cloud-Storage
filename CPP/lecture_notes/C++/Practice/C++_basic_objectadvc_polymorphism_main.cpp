// Virtual function 虛擬函式
//
// * 之前曾經介紹過函式與運算子的重載(Overload)，
//   重載可以使用一個函式名稱來執行不同的實作，
//   這是一種「編譯時期」就需決定的方式，
//   這是「早期繫結」(Early binding)、
//   「靜態繫結」(Static binding)，
//   因為在編譯時就可以決定函式的呼叫對象，
//   它們的呼叫位址在編譯時就可以得知。
//
// * 「虛擬函式」(Virtual function)
//   可以實現「執行時期」的多型支援，
//   是一個「晚期繫結」(Late binding)、
//   「動態繫結」(Dynamic binding)，
//   也就是指必須在執行時期才會得知
//   所要調用的物件或其上的公開介面。
// 
// * 在談虛擬函式之前必須先知道，
//   一個基底類別的物件指標，
//   可以用來指向其衍生類別物件而不會發生錯誤，
//   例如若基底類別是Foo1，而衍生類別是Foo2，
//   則下面這個指定是可以接受的。
//   Foo1 *fpte;
//   Foo2 f2;
//   fptr = &f2;

# include <iostream>


