# PyQt5 訊號與槽
# 事件處理機制入門
# PyQt5為事件處裡提供兩種機制：
# 1. 進階的訊號與槽機制 ==> 只能解決視窗控制項某些特定的行為
# 2. 基礎的事件處理機制 ==> 本身很複雜，屬於PyQt底層的機制，可視為訊號與槽的補充，
#                          當訊號與槽機制處理不了時，才會考慮採用事件處理機制。
# 事件和訊號與槽的區別
# 訊號與槽可以說是對事件處理機制的進階封裝，如果說事件是用來建立視窗控制項，
# 那麼訊號與槽就是使用這個控制項。以按鈕為例，一旦操作按鈕時，通常只關心clicked訊號。
# 至於該按鈕如何接收與處理滑鼠點擊事件、發射訊號等，則不予關心。例外情況是重載按鈕時，
# 例如改變它的行為：在按下滑鼠後觸發clicked訊號，而非釋放時。
# PyQt是針對Qt的封裝，Qt程式屬於事件驅動，它的每個動作都由背景的某個事件觸發。Qt有
# 很多事件類型，常見的Qt事件如下:
# 1. 鍵盤事件: 按下和鬆開事件。
# 2. 滑鼠事件: 移動滑鼠指標、按下和鬆開滑鼠按鍵。
# 3. 拖放事件: 以滑鼠進行拖放。
# 4. 滾輪事件: 滑鼠滾輪滾動。
# 5. 繪圖事件: 重繪某部分的螢幕。
# 6. 定時事件: 計時器逾時。
# 7. 焦點事件: 鍵盤焦點移動。
# 8. 進入和離開事件: 滑鼠指標移入或者移出Widget。
# 9. 移動事件： Widget的位置改變
# 10. 大小改變事件: Widget的大小改變。
# 11. 顯示和隱藏事件: 顯示和隱藏Widget。
# 12. 視窗事件: 是否為目前視窗。
# 還有 Socket事件、剪貼簿事件、字體改變事件、佈局改變事件......
#
# PyQt5提供下列5種事件處理和過濾方法(由弱到強)，前兩種方法的使用最為頻繁，
# 最後一種方法實際上根本用不到。
# (1) 重新實作事件函數
# e.g. mousePressEvent(), keyPressEvent(), paintEvent(), 這些是常見的事件處理方法。
# (2) 重新實作QObject.event()
# 一般應用於PyQt未提供該事件的處理函數的情況下，亦即增加新事件時。
# (3) 安裝事件篩選程式
# (4) 在QApplication安裝事件篩選程式
# (5) 重新實作QApplication的notify()方法

# Example
# (1)
# 重載按鍵事件
def keyPressEvent(self, event):
    if event.key() == Qt.Key_F1:
        self.helpSignal.emit("help message")